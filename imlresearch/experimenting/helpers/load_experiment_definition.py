import json
import os
import warnings

from imlresearch.experimenting.helpers.hparams_suggester import HParamsSuggester


class _TrialDefinitionsIterator:
    """ An iterator class for generating trial definition. """

    def __init__(self, suggester, num_trials, prefix):
        """
        Initialize the TrialDefinitionsIterator.

        Args:
            - suggester (HParamsSuggester): The hyperparameters suggester
                object.
            - num_trials (int): The number of trials to generate.
        """
        self.suggester = suggester
        self.num_trials = num_trials
        self.prefix = prefix
        self.trial_count = 0

    def __iter__(self):
        """
        Return the iterator object.

        Returns:
            - iterator: The iterator object.
        """
        return self

    def __next__(self):
        """
        Generate the next trial definition.

        Returns:
            - dict: The trial definition.

        Raises:
            - StopIteration: If all num_trials are already generated.
        """
        if self.trial_count == self.num_trials:
            raise StopIteration
        self.trial_count += 1
        name = f"{self.prefix}{self.trial_count}"
        hparams = self.suggester.suggest_next()
        return {"name": name, "hyperparameters": hparams}


def _load_definitions(definitions_json):
    """
    Load experiment information from a JSON file.

    Args:
        - definitions_json (str): The path to the directory containing the
            definitions.json file.

    Returns:
        - dict: A dictionary containing the experiment information.
    """
    if not os.path.exists(definitions_json):
        msg = f"{definitions_json} is not found in the experiment directory."
        raise FileNotFoundError(msg)
    with open(definitions_json, encoding="utf-8") as f:
        experiment_info = json.load(f)
    return experiment_info


def _assert_experiment_metadata(experiment_metadata):
    expected_keys = ["name", "description", "directory"]
    for key in expected_keys:
        assert key in experiment_metadata, f"{key} is not found in experiment_metadata."


def _process_trial_definitions(trial_definitions, experiment_dir):
    """
    Process the trial definitions to include the trial names.

    Args:
        - trial_definitions (list or dict): The trial definitions. It can be
            a list of dicts or a dict containing the hyperparameters
            configurations to be passed to HParamsSuggester class.
        - experiment_dir (str): The directory of the experiment.

    Returns:
        - iterator: An iterator of the trial definition.
    """
    # There are 2 options to define the trials. Option 1: Set manually the
    # trials providing a list of dicts. The dict should contain trial name and
    # hyperparameters.
    if isinstance(trial_definitions, list):
        expected_keys = {"name", "hyperparameters"}
        for trial in trial_definitions:
            assert (
                set(trial.keys()) == expected_keys
            ), "Invalid keys in list elements of trial_definitions."
        return iter(trial_definitions)

    # Option 2: Set the trials automatically by providing the hyperparameters
    # configurations. The trials will be generated by the hyperparameters
    # suggester. The names of the trials are generated automatically as well.
    if isinstance(trial_definitions, dict):
        num_trials = trial_definitions.pop("num_trials", 1)  # Default 1 trial.
        prefix = trial_definitions.pop(
            "prefix", "trial_"
        )  # Default prefix is "trial_".
        hparams_configs = trial_definitions.pop("hparams_configs", None)
        assert (
            hparams_configs is not None
        ), "hparams_configs is not a key in trial_definitions."
        if trial_definitions != {}:
            for key in trial_definitions.keys():
                msg = f"Ignoring key '{key}' in trial_definitions."
                warnings.warn(msg)
        try:
            suggester = HParamsSuggester(hparams_configs, storage_dir=experiment_dir)
        except AssertionError as e:
            msg = "Invalid hparams_configs in trial_definitions."
            raise AssertionError(msg) from e
        return _TrialDefinitionsIterator(suggester, num_trials, prefix)

    msg += "trial_definitions should be a list or a dict."
    raise ValueError(msg)


def load_experiment_definition(definition_json):
    """
    Load the experiment metadata and trial definitions from a JSON file.

    Args:
        - definition_json (str): The path to the JSON file containing the
            experiment definition.

    Returns:
        - tuple: A tuple containing the experiment metadata and trial
            definitions.
    """
    exp_def = _load_definitions(definition_json)
    assert len(exp_def) == 2, "Expected 2 keys in the definition file."
    assert (
        "experiment_metadata" in exp_def
    ), "experiment_metadata is not found in the definition file."
    assert (
        "trial_definitions" in exp_def
    ), "trial_definitions is not found in the definition file."
    experiment_metadata = exp_def["experiment_metadata"]
    _assert_experiment_metadata(experiment_metadata)
    experiment_dir = experiment_metadata["directory"]
    trial_definitions = exp_def["trial_definitions"]
    trial_definitions = _process_trial_definitions(trial_definitions, experiment_dir)
    return experiment_metadata, trial_definitions
